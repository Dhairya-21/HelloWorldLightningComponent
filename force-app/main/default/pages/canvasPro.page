<apex:page>
    <form>
        <div style="display: flex; justify-content: space-evenly; align-items: center">
            <input type="number" min="1" max="10" id="size" value="1" />
            <input type="text" id="type" value="1"/>
            <button id="undo">undo</button>
            <button id="redo">redo</button>
            <button id="clear">Clear</button>
            <button id="erase">Eraser</button>
            <button id="pen" style="display: none">Pen</button>
        </div>
        <br/>
        <canvas id="paint" style="border: 2px black solid"></canvas>
    </form>
    <script type="text/javascript">
        const canvas = document.getElementById('paint');
        const ctx = canvas.getContext('2d');
        canvas.width = 600;
        canvas.height = 200;
        ctx.lineJoin = 'round';
        ctx.lineWidth = 1;
        ctx.lineCap = 'round';
        ctx.strokeStyle = "red";

        let drawing = false;
        let pathsry = [];
        let pathRedo = [];
        let points = [];

        var brushType = 1;
        var mouse = { x: 0, y: 0 };
        var previous = { x: 0, y: 0 };

        canvas.addEventListener('mousedown', function (e) {
            drawing = true;
            previous = { x: mouse.x, y: mouse.y };
            mouse = oMousePos(canvas, e);
            points = [];
            points.push({ x: mouse.x, y: mouse.y })
        });

        canvas.addEventListener('mousemove', function (e) {
            if (drawing) {
                previous = { x: mouse.x, y: mouse.y };
                mouse = oMousePos(canvas, e);
                points.push({ x: mouse.x, y: mouse.y, z: ctx.lineWidth, clr: ctx.strokeStyle, style: brushType });
                draw(previous, mouse, brushType);
            }
        }, false);


        canvas.addEventListener('mouseup', function () {
            drawing = false;
            pathsry.push(points);
        }, false);

        size.addEventListener("change", function (event) {
            ctx.lineWidth = event.target.value;
        });

        undo.addEventListener('click', Undo);
        redo.addEventListener('click', Redo);
        clear.addEventListener('click', Clear);
        erase.addEventListener('click', EraseSelect);
        pen.addEventListener('click', PenSelect);
        type.addEventListener('change', penType);

        function Undo(event) {
            event.preventDefault();
            if (pathsry.length > 0) {
                pathRedo.push(pathsry.at(-1));
                pathsry.splice(-1, 1);
                drawPaths();
            }
        }

        function Redo(event) {
            event.preventDefault();
            if (pathRedo.length > 0) {
                pathsry.push(pathRedo.at(-1));
                pathRedo.splice(-1, 1);
                drawPaths();
            }
        }

        function Clear(event) {
            event.preventDefault();
            points = [];
            pathsry = [];
            pathRedo = [];
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function EraseSelect(event) {
            event.preventDefault();
            ctx.strokeStyle = 'white';
            pen.style.display = 'block';
            erase.style.display = 'none';
        }

        function PenSelect(event) {
            event.preventDefault();
            ctx.strokeStyle = 'red';
            pen.style.display = 'none';
            erase.style.display = 'block';
        }

        function penType(event) {
            event.preventDefault();
            if (event.target.value === '1') {
                ctx.lineJoin = 'round';
                ctx.lineCap = 'round';
                brushType = 1;
            } else if (event.target.value === '2') {
                ctx.lineJoin = 'butt';
                ctx.lineCap = 'butt';
                brushType = 2;
                console.log(1);
            } else if (event.target.value === '3') {
                ctx.lineJoin = 'round';
                ctx.lineCap = 'round';
                ctx.globalAlpha = 1;
                brushType = 3;
            } else if (event.target.value === '4') {
                ctx.lineJoin = 'round';
                ctx.lineCap = 'round';
                brushType = 4;
            }
        }

        function drawPaths() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            pathsry.forEach(path => {
                ctx.beginPath();
                ctx.moveTo(path[0].x, path[0].y);
                for (let i = 1; i < path.length; i++) {
                    ctx.strokeStyle = path[i].clr;
                    ctx.lineWidth = path[i].z;
                    if (path[i].style === 1 || path[i].style === 2 || path[i].style === 4) {
                        ctx.lineTo(path[i].x, path[i].y);

                    } else if (path[i].style === 3) {
                        ctx.lineTo(path[i].x, path[i].y);
                        ctx.stroke();
                        ctx.lineTo(path[i].x - 2, path[i].y - 2);
                        ctx.stroke();
                        ctx.lineTo(path[i].x - 4, path[i].y - 4);
                        ctx.stroke();
                        ctx.lineTo(path[i].x + 2, path[i].y + 2);
                        ctx.stroke();
                        ctx.lineTo(path[i].x + 4, path[i].y + 4);
                    }
                }
                ctx.stroke();
            })
        }

        function oMousePos(canvas, evt) {
            var ClientRect = canvas.getBoundingClientRect();
            return {
                x: Math.round(evt.clientX - ClientRect.left),
                y: Math.round(evt.clientY - ClientRect.top)
            }
        }

        function draw(oldPos, newPos, brush) {
            ctx.beginPath();

            if (brush === 1 || brush === 2) {
                ctx.moveTo(oldPos.x, oldPos.y);
                ctx.lineTo(newPos.x, newPos.y);

            } else if (brushType === 3) {
                ctx.moveTo(oldPos.x, oldPos.y);
                ctx.lineTo(mouse.x, mouse.y);
                ctx.stroke();

                ctx.moveTo(oldPos.x - 4, oldPos.y - 4);
                ctx.lineTo(newPos.x - 4, newPos.y - 4);
                ctx.stroke();

                ctx.moveTo(oldPos.x - 2, oldPos.y - 2);
                ctx.lineTo(newPos.x - 2, newPos.y - 2);
                ctx.stroke();

                ctx.moveTo(oldPos.x + 2, oldPos.y + 2);
                ctx.lineTo(newPos.x + 2, newPos.y + 2);
                ctx.stroke();

                ctx.moveTo(oldPos.x + 4, oldPos.y + 4);
                ctx.lineTo(newPos.x + 4, newPos.y + 4);
            }
            else if (brushType === 4) {
                ctx.lineWidth = getRandomInt(3, 5);
                ctx.moveTo(oldPos.x, oldPos.y);
                ctx.lineTo(newPos.x, newPos.y);
            }
            ctx.stroke();
        }

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
    </script>
</apex:page>